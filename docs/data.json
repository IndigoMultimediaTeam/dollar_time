{
    "project": {},
    "files": {
        "src\\from_functions\\fromDate.sub.js": {
            "name": "src\\from_functions\\fromDate.sub.js",
            "modules": {},
            "classes": {},
            "fors": {
                "$time.{namespace}": 1
            },
            "namespaces": {}
        },
        "src\\from_functions\\fromDateArguments.sub.js": {
            "name": "src\\from_functions\\fromDateArguments.sub.js",
            "modules": {},
            "classes": {},
            "fors": {
                "$time.{namespace}": 1
            },
            "namespaces": {}
        },
        "src\\from_functions\\fromNow.sub.js": {
            "name": "src\\from_functions\\fromNow.sub.js",
            "modules": {},
            "classes": {},
            "fors": {
                "$time.{namespace}": 1
            },
            "namespaces": {}
        },
        "src\\from_functions\\fromString.sub.js": {
            "name": "src\\from_functions\\fromString.sub.js",
            "modules": {},
            "classes": {},
            "fors": {
                "$time.{namespace}": 1
            },
            "namespaces": {}
        },
        "src\\from_functions\\toDateArray.sub.js": {
            "name": "src\\from_functions\\toDateArray.sub.js",
            "modules": {},
            "classes": {},
            "fors": {
                "$time.{namespace}": 1
            },
            "namespaces": {}
        },
        "src\\modify\\modify.sub.js": {
            "name": "src\\modify\\modify.sub.js",
            "modules": {},
            "classes": {},
            "fors": {
                "$time.{namespace}": 1
            },
            "namespaces": {}
        },
        "src\\to_functions\\helpers.sub.js": {
            "name": "src\\to_functions\\helpers.sub.js",
            "modules": {},
            "classes": {},
            "fors": {
                "$time.{namespace}": 1
            },
            "namespaces": {}
        },
        "src\\to_functions\\toDate.sub.js": {
            "name": "src\\to_functions\\toDate.sub.js",
            "modules": {},
            "classes": {},
            "fors": {
                "$time.{namespace}": 1
            },
            "namespaces": {}
        },
        "src\\to_functions\\toLocaleString.sub.js": {
            "name": "src\\to_functions\\toLocaleString.sub.js",
            "modules": {},
            "classes": {},
            "fors": {
                "$time.{namespace}": 1
            },
            "namespaces": {}
        },
        "src\\to_functions\\toString.sub.js": {
            "name": "src\\to_functions\\toString.sub.js",
            "modules": {},
            "classes": {},
            "fors": {
                "$time.{namespace}": 1
            },
            "namespaces": {}
        },
        "src\\to_functions\\toStringPreDefined.sub.js": {
            "name": "src\\to_functions\\toStringPreDefined.sub.js",
            "modules": {},
            "classes": {},
            "fors": {
                "$time.{namespace}": 1
            },
            "namespaces": {}
        },
        "src\\utility\\double.sub.js": {
            "name": "src\\utility\\double.sub.js",
            "modules": {},
            "classes": {},
            "fors": {
                "$time.{namespace}": 1
            },
            "namespaces": {}
        },
        "src\\utility\\getDaysInMonth.sub.js": {
            "name": "src\\utility\\getDaysInMonth.sub.js",
            "modules": {},
            "classes": {},
            "fors": {
                "$time.{namespace}": 1
            },
            "namespaces": {}
        },
        "src\\utility\\getMonthName.sub.js": {
            "name": "src\\utility\\getMonthName.sub.js",
            "modules": {},
            "classes": {},
            "fors": {
                "$time.{namespace}": 1
            },
            "namespaces": {}
        },
        "src\\utility\\getOrdinalSuffix.sub.js": {
            "name": "src\\utility\\getOrdinalSuffix.sub.js",
            "modules": {},
            "classes": {},
            "fors": {
                "$time.{namespace}": 1
            },
            "namespaces": {}
        },
        "src\\$time.js": {
            "name": "src\\$time.js",
            "modules": {},
            "classes": {
                "$time.{namespace}": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\$time_init.sub.js": {
            "name": "src\\$time_init.sub.js",
            "modules": {},
            "classes": {},
            "fors": {
                "$time.{namespace}": 1
            },
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "$time.{namespace}": {
            "name": "$time.{namespace}",
            "shortname": "$time.{namespace}",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\$time.js",
            "line": 3,
            "description": "This NAMESPACE provides features for date/time. Mainly, there are utilities using **Date** class and feature [`Date.prototype.toLocaleString`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString).",
            "static": 1
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "src\\from_functions\\fromDate.sub.js",
            "line": 3,
            "description": "Function generates `DateArray` from instance of `Date`.",
            "itemtype": "method",
            "name": "fromDate",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "date_instance",
                    "description": "\n - instance of `Date` class",
                    "type": "Date"
                }
            ],
            "return": {
                "description": "- See [toDateArray](#methods_toDateArray).",
                "type": "DateArray"
            },
            "class": "$time.{namespace}"
        },
        {
            "file": "src\\from_functions\\fromDateArguments.sub.js",
            "line": 3,
            "description": "Function generates `DateArray` from arguments to initialize `Date`.",
            "itemtype": "method",
            "name": "fromDateArguments",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "args",
                    "description": "\n - parameters for initialize `Date` class",
                    "type": "...Mixed"
                }
            ],
            "return": {
                "description": "- See [toDateArray](#methods_toDateArray).",
                "type": "DateArray"
            },
            "class": "$time.{namespace}"
        },
        {
            "file": "src\\from_functions\\fromNow.sub.js",
            "line": 3,
            "description": "Function generates `DateArray` from current date and time.\n\n**Warning:** Internally uses `toISOString` method so result is always converted to \"+00:00\": `p($time.fromNow, $time.setTimeZone(\"+02:00\"), $time.toString())()` (`p` is some pipe function) — this returns \"2019-07-10T16:48:43+02:00\" instead of \"2019-07-10T18:48:43+02:00\" (current time) … the flow is \"2019-07-10T18:48:43+02:00\"-`fromNow`->\"2019-07-10T16:48:43Z\"-`setTimeZone`->\"2019-07-10T16:48:43+02:00\".",
            "itemtype": "method",
            "name": "fromNow",
            "access": "public",
            "tagname": "",
            "return": {
                "description": "- See [toDateArray](#methods_toDateArray).",
                "type": "DateArray"
            },
            "class": "$time.{namespace}"
        },
        {
            "file": "src\\from_functions\\fromString.sub.js",
            "line": 4,
            "description": "Function generates `DateArray` from passed string.",
            "itemtype": "method",
            "name": "fromString",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "timestamp_string",
                    "description": "\n - Supported forms are combinations of date (\"YYYY-MM-DD\", \"DD/MM/YYYY\"), time (\"HH:mm:ss\", \"HH:mm\") and timezone (\"CET\", \"+01:00\", \"-02:00\", ...)\n - Typically: \"2019-06-02 12:35:45 +01:00\", \"2019-06-02T12:35:45+01:00\", \"12:35:45+01:00 2019-06-02\", ...",
                    "type": "String"
                },
                {
                    "name": "timezone",
                    "description": "\n - Override timezone in `timestamp_string`",
                    "type": "String",
                    "optional": true,
                    "optdefault": " internal_zone"
                }
            ],
            "return": {
                "description": "- See [toDateArray](#methods_toDateArray).",
                "type": "DateArray"
            },
            "class": "$time.{namespace}"
        },
        {
            "file": "src\\from_functions\\toDateArray.sub.js",
            "line": 3,
            "description": "Function generates array in a form `[ date, time, time_zone ]` from 'ISO' like string.",
            "itemtype": "method",
            "name": "toDateArray",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "timestamp_string",
                    "description": "- Supported forms are combinations of date (\"YYYY-MM-DD\", \"DD/MM/YYYY\"), time (\"HH:mm:ss\", \"HH:mm\") and timezone (\"CET\", \"+01:00\", \"-02:00\", ...)\n - Typically: \"2019-06-02 12:35:45 +01:00\", \"2019-06-02T12:35:45+01:00\", \"12:35:45+01:00 2019-06-02\", ...",
                    "type": "String"
                }
            ],
            "return": {
                "description": "- `[ date, time, time_zone ]`\n - where:\n     - `date` is always \"YYYY-MM-DD\" or \"\"\n     - `time` is always \"HH:mm:SS\" or \"HH:mm:00\" or \"\"\n     - `time_zone` is always \"[+-]\\d\\d:\\d\\d\" or \"CET\" or \"\"",
                "type": "DateArray"
            },
            "class": "$time.{namespace}"
        },
        {
            "file": "src\\modify\\modify.sub.js",
            "line": 5,
            "description": "Curried method `mod_obj=> date_array=> result` – `mod_obj` holds information how modify given `date_array` **&lt;DateArray&gt;**. Result is again **&lt;DateArray&gt;**.",
            "itemtype": "method",
            "name": "modify",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "mod_obj",
                    "description": "- object literal representing requested operations\n - use name convention like [setters for `Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#Setter) (only one argument is allowed)\n - supports also *add\\** commands with the same notation (\"setMonth\" => \"addMonth\")\n - **IMPORTANT NOTE:** There are three behaviour changes\n     - \"setMonth\" is indexed from 1 (instead of 0)\n     - for \"setDate\" there is alias \"setDay\"\n     - for \"addDate\" there is alias \"addDays\"\n - Some operations: **\"\\*Date\"** (or **\"setDay\"**, **\"addDays\"**), **\"\\*Month\"**, **\"\\*FullYear\"**, **\"\\*Hours\"**, **\"\\*Minutes\"**, **\"\\*Seconds\"**",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "- `date_array`**&lt;DateArray&gt;** `=>` **&lt;DateArray&gt;**\n - See [toDateArray](#methods_toDateArray).",
                "type": "Function"
            },
            "class": "$time.{namespace}"
        },
        {
            "file": "src\\modify\\modify.sub.js",
            "line": 37,
            "description": "Helper method for invoking \"add*\" operations in [`modify`](#methods_modify).\n\nIn general `d.set...(d.get...+${value})` (where `d` is instance of `Date`).",
            "itemtype": "method",
            "name": "modifyAdditions",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "operation",
                    "description": "- e.g. \"addMonth\"",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "- mainly argument (number) for",
                    "type": "Number"
                },
                {
                    "name": "dateObject",
                    "description": "- instance of `Date`",
                    "type": "Date"
                }
            ],
            "return": {
                "description": "- returns `dateObject`",
                "type": "Date"
            },
            "class": "$time.{namespace}"
        },
        {
            "file": "src\\to_functions\\helpers.sub.js",
            "line": 7,
            "description": "Function generates text based on `format`, `locale` and `timeZone` from `DateArray`.",
            "itemtype": "method",
            "name": "toStringFromObject",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "format",
                    "description": "- Placeholder for replace/generate final string (eg. [[ \"month\", \"2-digits\" ]]===two digits month)\n - see [`getFormatObject`](#methods_getFormatObject) an [`format_arrays`](#props_format_arrays).",
                    "type": "Array"
                },
                {
                    "name": "params_obj",
                    "description": "- It is in fact argument for [`Date.prototype.toLocaleString`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString)",
                    "type": "DateArray",
                    "props": [
                        {
                            "name": "locale",
                            "description": "- In which language/national format generate final string",
                            "type": "String"
                        },
                        {
                            "name": "timeZone",
                            "description": "- Time zone name from [`ary_ianna_time_zones`](#props_ary_ianna_time_zones).",
                            "type": "String"
                        },
                        {
                            "name": "declension",
                            "description": "- **default: true**\n - Needed for some languages — for example in Czech: \"10. července\" (`declension=true`), or \"10. červenec\" (`declension=false`)",
                            "type": "String"
                        }
                    ]
                }
            ],
            "return": {
                "description": "- `DateArray`=> **&lt;String&gt;**",
                "type": "Function"
            },
            "example": [
                "\n     $time.toStringFromObject(\"DD/MM/YYYY HH:mm:SS\",{ locale: \"en-GB\" })($time.fromNow());//= \"05/06/2019 09:32:20\""
            ],
            "class": "$time.{namespace}"
        },
        {
            "file": "src\\to_functions\\helpers.sub.js",
            "line": 54,
            "description": "Generates multidimensional array for formatting (eg. \"YYYY\"=> `[ [ \"year\", \"numeric\" ] ]`).",
            "itemtype": "method",
            "name": "getFormatObject",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "format_string",
                    "description": "- supports \"YYYY\", \"YY\", \"MM\", \"MMM\", \"MMMM\", \"dddd\" (weekday - Monday), \"ddd\" (shorter weekday - Mon), \"dd\" (Mo), \"d\" (0===Sun <> 6===Sat), \"DD\", \"D\", \"Do\", \"HH\", \"H\", \"mm\", \"m\", \"SS\", \"S\", \"W\", \"Wo\"",
                    "type": "String"
                }
            ],
            "return": {
                "description": "- `[ [ operation, argument, params ] ]`\n - `Opertions` are in fact arguments for [`Date.prototype.toLocaleString`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString) and `arguments` are their values.",
                "type": "...Array"
            },
            "class": "$time.{namespace}"
        },
        {
            "file": "src\\to_functions\\toDate.sub.js",
            "line": 4,
            "description": "Function initializes `Date` from `DateArray`.",
            "itemtype": "method",
            "name": "toDate",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "date_array",
                    "description": "- See [toDateArray](#methods_toDateArray).",
                    "type": "DateArray"
                }
            ],
            "return": {
                "description": "",
                "type": "Date"
            },
            "class": "$time.{namespace}"
        },
        {
            "file": "src\\to_functions\\toLocaleString.sub.js",
            "line": 5,
            "description": "It is wrapper arround [`Date.prototype.toLocaleString`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString).",
            "itemtype": "method",
            "name": "toLocaleString",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "format_object_name",
                    "description": "- **Default: `\"date_time\"`**\n - name of predefined time/date combinations see [`format_objects`](#props_format_objects).",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "- modificators for `Date.prototype.toLocaleString`",
                    "type": "Object",
                    "props": [
                        {
                            "name": "locale",
                            "description": "- **Default: `internal_locale`**\n - see [`Date.prototype.toLocaleString` Parameters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString#Parameters).",
                            "type": "String"
                        },
                        {
                            "name": "timeZone",
                            "description": "- **Default: `internal_zone`**\n - sets `timeZone` key in `options` see [`Date.prototype.toLocaleString` Parameters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString#Parameters).",
                            "type": "String"
                        }
                    ]
                }
            ],
            "return": {
                "description": "- **`date_array`&lt;DateArray&gt;`=>` &lt;String&gt;**\n - returns result of [`Date.prototype.toLocaleString`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString);",
                "type": "Function"
            },
            "class": "$time.{namespace}"
        },
        {
            "file": "src\\to_functions\\toString.sub.js",
            "line": 3,
            "description": "Function generates text based on `format_string`, `locale` and `timeZone` from `DateArray`.",
            "itemtype": "method",
            "name": "toString",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "format_string",
                    "description": "- Placeholder for replace/generate final string (eg. \"MM\"===two digits month)\n - see [`getFormatObject`](#methods_getFormatObject)",
                    "type": "String"
                },
                {
                    "name": "params_obj",
                    "description": "- It is in fact argument for [`Date.prototype.toLocaleString`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString)",
                    "type": "DateArray",
                    "props": [
                        {
                            "name": "locale",
                            "description": "- In which language/national format generate final string",
                            "type": "String"
                        },
                        {
                            "name": "timeZone",
                            "description": "- Time zone name from [`ary_ianna_time_zones`](#props_ary_ianna_time_zones).",
                            "type": "String"
                        },
                        {
                            "name": "declension",
                            "description": "- **default: true**\n - Needed for some languages — for example in Czech: \"10. července\" (`declension=true`), or \"10. červenec\" (`declension=false`)",
                            "type": "String"
                        }
                    ]
                }
            ],
            "return": {
                "description": "- `DateArray`=> **&lt;String&gt;**",
                "type": "Function"
            },
            "example": [
                "\n     $time.toStringFromObject(\"DD/MM/YYYY HH:mm:SS\",{ locale: \"en-GB\" })($time.fromNow());//= \"05/06/2019 09:32:20\""
            ],
            "class": "$time.{namespace}"
        },
        {
            "file": "src\\to_functions\\toStringPreDefined.sub.js",
            "line": 4,
            "description": "Similar to [`toString`](#methods_toString) generates string based on given format. But now based on existing predefined/cached formats see [`format_arrays`](#props_format_arrays).",
            "itemtype": "method",
            "name": "toStringPreDefined",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "format_name",
                    "description": "- **Default: `\"YMDHms_2d\"`**\n - See [`format_arrays`](#props_format_arrays).",
                    "type": "String"
                },
                {
                    "name": "params_obj",
                    "description": "- See [`toStringFromObject`](#methods_toStringFromObject).",
                    "type": "DateArray"
                }
            ],
            "return": {
                "description": "- **`date_array`&lt;DateArray&gt;=> &lt;String&gt;**",
                "type": "Function"
            },
            "example": [
                "\n     $time.toStringPreDefined(\"YMDHms_2d\", { locale: \"en-GB\" })($time.fromNow());//= \"2019-06-05 09:32:20\""
            ],
            "class": "$time.{namespace}"
        },
        {
            "file": "src\\utility\\double.sub.js",
            "line": 2,
            "description": "Function adds leading zero to the `time`. [It can be replaced in future: see `padStart`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart)",
            "itemtype": "method",
            "name": "double",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "time",
                    "description": "",
                    "type": "Number|String"
                }
            ],
            "return": {
                "description": "* 00, 01, 02, ..., 09, 10, ..., 100, ...",
                "type": "String"
            },
            "class": "$time.{namespace}"
        },
        {
            "file": "src\\utility\\getDaysInMonth.sub.js",
            "line": 3,
            "description": "Returns number of days in given month (and year)",
            "itemtype": "method",
            "name": "daysInMonth",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "month",
                    "description": "- ISO number of month (eg 01 or 1 for January)",
                    "type": "String|Number"
                },
                {
                    "name": "year",
                    "description": "- **Default: current year**\n - ISO nimber of year (eg. 2019)",
                    "type": "String|Number"
                }
            ],
            "return": {
                "description": "- total of days",
                "type": "Number"
            },
            "class": "$time.{namespace}"
        },
        {
            "file": "src\\utility\\getDaysInMonth.sub.js",
            "line": 19,
            "description": "Returns number of days in given month",
            "itemtype": "method",
            "name": "getDaysInMonth",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "date_array",
                    "description": "- **Default: current date**\n - see [`toDateArray`](#methods_toDateArray)",
                    "type": "DateArray"
                }
            ],
            "return": {
                "description": "- total of days",
                "type": "Number"
            },
            "class": "$time.{namespace}"
        },
        {
            "file": "src\\utility\\getMonthName.sub.js",
            "line": 2,
            "itemtype": "method",
            "name": "getMonthName",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "n",
                    "description": "* Month number (typically [1-12])\n * Works cyclically `13===1, ...`",
                    "type": "Number"
                },
                {
                    "name": "l",
                    "description": "\n * Length of output Month name",
                    "type": "Number|Boolean",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "* English month name",
                "type": "String"
            },
            "example": [
                "\n    console.log($time.getMonthName(5));//\"May\"\n    console.log($time.getMonthName(24, 4));//\"Dece\""
            ],
            "class": "$time.{namespace}"
        },
        {
            "file": "src\\utility\\getOrdinalSuffix.sub.js",
            "line": 3,
            "description": "See [`ordinal_numbers`](#props_ordinal_numbers).",
            "itemtype": "method",
            "name": "getOrdinalSuffix",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "n",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "* `n`+English suffix",
                "type": "String"
            },
            "example": [
                "\n    console.log($time.getOrdinalSuffix(1));//\"1st\""
            ],
            "class": "$time.{namespace}"
        },
        {
            "file": "src\\$time.js",
            "line": 19,
            "description": "Alias for `undefined` which can be used to trigger default value of argument. (eg. `test($time._)===\"A\"; function test(a= \"A\"){ return a; }`)",
            "itemtype": "property",
            "name": "_",
            "type": "Undefined",
            "access": "public",
            "tagname": "",
            "class": "$time.{namespace}"
        },
        {
            "file": "src\\$time_init.sub.js",
            "line": 3,
            "description": "Internal object holding predefined formating arguments for `$time.toLocaleString`. For example `format_objects.time==={ hour: \"2-digit\", minute: \"2-digit\" }`.\n\nKeys:\n - `time`: shows combination of 2-digits hour and minutes\n - `time_seconds`: shows combination of `time` and seconds\n - `date`: shows combination of 2-digits day, month and full year\n - `date_time`: shows combination of `time` and `date`\n - `date_time_seconds`: shows combination of `date_time` and `seconds`",
            "itemtype": "property",
            "name": "format_objects",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "$time.{namespace}"
        },
        {
            "file": "src\\$time_init.sub.js",
            "line": 26,
            "description": "Internal object holding predefined formating arguments for `getFormatObject`. For example `format_arrays.YYYYMMDD=== [ [\"year\", \"numeric\"], dash, [\"month\", two_dig], dash, [\"day\", two_dig] ]`.\n\nKeys:\n - `YMD_2d`: shows **\"YYYY-MM-DD\"**\n - `YMDHms_2d`: shows **\"YYYY-MM-DD HH:mm:ss\"**\n - `Hms_2d`: shows **\"HH:mm:ss\"**",
            "itemtype": "property",
            "name": "format_arrays",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "$time.{namespace}"
        },
        {
            "file": "src\\$time_init.sub.js",
            "line": 47,
            "description": "Internal helper array for `getOrdinalSuffix`.",
            "itemtype": "property",
            "name": "ordinal_numbers",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "$time.{namespace}"
        },
        {
            "file": "src\\$time_init.sub.js",
            "line": 55,
            "description": "Very simple test for 'YYYY-MM-DD' pattern. Returns `true` if `date_string` includes **`-`**.",
            "itemtype": "method",
            "name": "isDateString",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "date_string",
                    "description": "",
                    "type": "String|...String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "example": [
                "\n     isDateString(\"2019-05-06\");//= true\n     isDateString(\"06/05/2019\");//= false !!!!"
            ],
            "class": "$time.{namespace}"
        },
        {
            "file": "src\\$time_init.sub.js",
            "line": 67,
            "description": "Very simple test for 'T...' pattern. Returns `true` if `date_string` includes **`T`**.",
            "itemtype": "method",
            "name": "isTimeString",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "date_string",
                    "description": "",
                    "type": "String|...String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "example": [
                "\n     isDateString(\"T12:00:00\");//= true\n     isDateString(\"12:00:00\");//= false !!!\n     isDateString(\"Twrong\");//= true !!!!"
            ],
            "class": "$time.{namespace}"
        },
        {
            "file": "src\\$time_init.sub.js",
            "line": 83,
            "description": "This array stores all time zones names (eg. 'Europe/Andorra') supported by `{ timeZone: ... }` in second argument of `Date.prototype.toLocaleString`.\n\nOriginal from [stackoverflow.com/a/54500197](https://stackoverflow.com/a/54500197).",
            "itemtype": "property",
            "name": "ary_ianna_time_zones",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "$time.{namespace}"
        },
        {
            "file": "src\\$time_init.sub.js",
            "line": 439,
            "description": "This object stores offsets in `ary_ianna_time_zones` (keys) and one corresponding index.\n\nSo for exmple, `ary_ianna_time_offsets[\"CET\"]` is equal to **284** which is index of `ary_ianna_time_zones[284]==='Europe/Prague'` (in winter \"+01:00\" and in summer \"+02:00\").\n\nNext example is `ary_ianna_time_offsets[\"-01:00\"]` is equal to **238** which is index of `ary_ianna_time_zones[238]==='Atlantic/Cape_Verde'` (always \"-01:00\").\n\n**IMPORTANT NOTE:** BST, EET, WET hasn't been validated! … idea is to behave the same way like CET",
            "itemtype": "property",
            "name": "ary_ianna_time_offsets",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "$time.{namespace}"
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\from_functions\\fromDate.sub.js:3"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\from_functions\\fromDateArguments.sub.js:3"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\from_functions\\fromNow.sub.js:3"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\from_functions\\fromString.sub.js:4"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\from_functions\\toDateArray.sub.js:3"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\modify\\modify.sub.js:5"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\modify\\modify.sub.js:37"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\to_functions\\helpers.sub.js:7"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\to_functions\\helpers.sub.js:54"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\to_functions\\toDate.sub.js:4"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\to_functions\\toLocaleString.sub.js:5"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\to_functions\\toString.sub.js:3"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\to_functions\\toStringPreDefined.sub.js:4"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\utility\\getDaysInMonth.sub.js:3"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\utility\\getDaysInMonth.sub.js:19"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\$time_init.sub.js:55"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\$time_init.sub.js:67"
        }
    ]
}